var fs = require('fs');
var modulesByTypes = require('./someHumanData').modulesByTypes;
var someTranslates = require('./someHumanData').someTranslates;
var prettier = require('prettier');
const csv = require('csv-parser');

const outputFileName = './data/moduleData.js';

Promise.all([
  csvToJsonPromise('./raw_data/modules.csv'),
  csvToJsonPromise('./raw_data/projectiles.csv'),
  csvToJsonPromise('./raw_data/capital_ships.csv'),
  csvToJsonPromise('./raw_data/loc_strings_en.csv', ['key', 'value']),
]).then(([modulesDataRaw, projectilesDataRaw, capitalShipsRaw, localisation]) => {
  const localisationMap = localisation.reduce((acc, { key, value }) => {
    acc[key] = value;
    return acc;
  }, {});

  let modulesData = addTranslations(getTabledData(modulesDataRaw), localisationMap);
  let projectilesData = addTranslations(getTabledData(projectilesDataRaw), localisationMap);
  let { MiningDrone, ShipmentDrone, AlphaDrone } = addTranslations(getTabledData(capitalShipsRaw), localisationMap);
  let capitalShipsData = { MiningDrone, ShipmentDrone, AlphaDrone };

  let someTranslates2 = {};
  Object.entries(someTranslates).forEach(([paramKey, translateKey]) => {
    someTranslates2[paramKey] = localisationMap[translateKey];
  });

  saveToFile(outputFileName, { modulesData, projectilesData, capitalShipsData, someTranslates: someTranslates2 });
});

function addTranslations(data, localisationMap) {
  Object.keys(data).forEach((key) => {
    if (data[key].TID_Description && data[key].TID) {
      data[key].eng = {
        name: localisationMap[data[key].TID],
        deacription: localisationMap[data[key].TID_Description],
      };
    }
  });
  return data;
}

function csvToJsonPromise(path, headers) {
  let result = [];

  return new Promise((resolve, reject) => {
    const stream = fs
      .createReadStream(path)
      .pipe(csv(headers))
      .on('data', (row) => {
        result.push(row);
      })
      .on('finish', function(event) {
        resolve(result);
      });

    setTimeout(() => {
      reject(`timeout read `, path);
    }, 3000);
  });
}

function saveToFile(filePath, { modulesData, projectilesData, capitalShipsData, someTranslates }) {
  const content = `
// generated by ${__filename} 
// at ${new Date().toString()}

var modulesData = ${JSON.stringify(modulesData, true, 2)}

var projectilesData = ${JSON.stringify(projectilesData, true, 2)}

var capitalShipsData = ${JSON.stringify(capitalShipsData, true, 2)}

var modulesByTypes = ${JSON.stringify(modulesByTypes, true, 2)}

var someTranslates = ${JSON.stringify(someTranslates, true, 2)}

const allModuleKeys = [
  ...modulesByTypes.trade,
  ...modulesByTypes.mining,
  ...modulesByTypes.weapon,
  ...modulesByTypes.shield,
  ...modulesByTypes.support
];

module.exports = {
  modulesData,
  allModuleKeys,
  projectilesData,
  capitalShipsData,
  modulesByTypes,
  someTranslates
};
`;

  fs.writeFileSync(
    filePath,
    prettier.format(content, {
      parser: 'babel',
      trailingComma: 'es5',
      tabWidth: 2,
      semi: true,
      printWidth: 500, // чтоб массивы выстраивались в одну линию
      jsxSingleQuote: true,
      jsxBracketSameLine: false,
      arrowParens: 'always',
      bracketSpacing: true,
      singleQuote: true,
    })
  );
}

function getTabledData(modulesData) {
  let modulesInfo = {};
  let currentName = null;

  modulesData.forEach((modData) => {
    if (+modData.Hide) {
      return;
    }

    if (modData.Name && currentName !== modData.Name) {
      currentName = modData.Name;

      modulesInfo[currentName] = {};

      Object.keys(modData).forEach((key) => {
        modulesInfo[currentName][key] = [];
      });
    }

    Object.keys(modData).forEach((key) => {
      modulesInfo[currentName][key].push(modData[key]);
    });
  });

  Object.keys(modulesInfo).forEach((moduleId) => {
    Object.entries(modulesInfo[moduleId]).forEach(([param, value]) => {
      const allValues = value.join('');

      if (allValues === '') {
        // удаляем все полностью пустые параметры
        delete modulesInfo[moduleId][param];
      } else if (allValues === value[0]) {
        // если в у параметра заполнено только первое значение, то заменяем массив на это значение
        modulesInfo[moduleId][param] = value[0];
      }
    });
  });

  return modulesInfo;
}
